#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
using namespace std;

bool can(int x, int n, vector<int>& rocks) {
    int cnt = 0;
    for (int i = 0; i < rocks.size() - 1; i++) {
        if (rocks[i + 1] - rocks[i] < x) {
            int temp = i;
            while (i + 1 < rocks.size() && rocks[i + 1] - rocks[temp] < x) {
                cnt++;
                i++;
            }

            if (cnt > n) return false;
        }
    }

    return true;
}

int solution(int distance, vector<int> rocks, int n) {
    rocks.push_back(0);
    rocks.push_back(distance);
    sort(rocks.begin(), rocks.end());

    int l = 0, r = distance + 1;
    while (l != r - 1) {
        int mid = (l + r) / 2;
        if (can(mid, n, rocks)) {
            l = mid;
        }
        else r = mid;
    }


    return l;
}

int main() {
    cout<<solution(25, { 2, 14, 11, 21, 17 }, 4);
}