#include <queue>
#include <iostream>
using namespace std;
int n, m;
char maps[51][51];
bool vi[51][51][64];
int dx[4]{ 0,0,1,-1 };
int dy[4]{ 1,-1,0,0 };

typedef struct info {
	int x, y, keys;
}info;
int main() {
	queue<info> q;
	cin >> n >> m;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> maps[i][j];
			if (maps[i][j] == '0') {
				maps[i][j] = '.';
				vi[i][j][0] = true;
				q.push({ i,j,0 });
			}
		}
	}

	int ans = 0;
	while (!q.empty()) {
		int sz = q.size();
		for (int k = 0; k < sz; k++) {
			int x = q.front().x;
			int y = q.front().y;
			int keys = q.front().keys;
			q.pop();

			if (maps[x][y] == '1') {
				cout << ans;
				return 0;
			}

			for (int i = 0; i < 4; i++) {
				int nx = x + dx[i];
				int ny = y + dy[i];
				if (nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
				if (maps[nx][ny] == '#' || vi[nx][ny][keys]) continue;

				if (maps[nx][ny] == '1') {
					vi[nx][ny][keys] = true;
					q.push({ nx,ny,keys });
				}//exit
				else if (maps[nx][ny] >= 'A' && maps[nx][ny] <= 'F') {
					int keyN = maps[nx][ny] - 'A';
					int key = 1 << keyN;
					if ((keys & key) != 0) {
						vi[nx][ny][keys] = true;
						q.push({ nx,ny,keys });
					}
				}//door
				else if (maps[nx][ny] >= 'a' && maps[nx][ny] <= 'f') {
					int keyN = maps[nx][ny] - 'A';
					int key = 1 << keyN;
					vi[nx][ny][keys|key] = true;
					q.push({ nx,ny,(keys | key) });
				}//key
				else {
					vi[nx][ny][keys] = true;
					q.push({ nx,ny,keys });
				}//space
			}
		}
		ans++;
	}

	cout << -1;

	return 0;
}