#include <iostream>
#include <queue>
#include <stack>
#include <vector>
#include <algorithm>
#include <bitset>
using namespace std;
#define INF 2147483647

int dist[1001];
vector<pair<int, int>> busInfo[1001];
priority_queue<pair<int, int>> pq;


void dijkstra(int start) {
	fill(dist, dist + 1001, INF);
	dist[1] = 0;
	pq.push({ 0,start });

	while (!pq.empty()) {
		int cost = -pq.top().first;
		int now = pq.top().second;
		pq.pop();

		for (int i = 0; i < busInfo[now].size(); i++) {
			int ncost = cost + busInfo[now][i].first;
			int next = busInfo[now][i].second;
			if (ncost < dist[next]) {
				dist[next] = ncost;
				pq.push({ -ncost,next });
			}
		}
	}


}

int main() {
	
	ios::sync_with_stdio(0);
	cin.tie(0);

	int n, m;
	cin >> n >> m;

	for (int i = 0; i < m; i++) {
		int x, y, cost;
		cin >> x >> y >> cost;
		busInfo[x].push_back({ cost,y });
	}

	for (int i = 0; i < n; i++) {
		sort(busInfo[i].begin(), busInfo[i].end());
	}
	int from, to;
	cin >> from >> to;
	dijkstra(from);
	cout << dist[to];
}


// https://www.acmicpc.net/board/view/97033
// 출발 정점과 도착 정점이 같은 경우의 케이스 고려