#include <iostream>
#include <vector>
#include <cmath>
using namespace std;
int s, n, k, r1, r2, c1, c2;
int ansMap[51][51];


void draw(int sx,int sy,int ex,int ey,int ch) {
	for (int i = sx; i <= ex;i++) {
		for (int j = sy; j <= ey; j++) {
			ansMap[i - r1][j - c1] = ch;
		}
	}
}

void recur(int nSize, int x, int y) {
	if (nSize == 1) {
		ansMap[x - r1][y - c1] = 0;
		return;
	}
	else {

		int nSizeNext = nSize / n;
		int blackLoc = (n - k) / 2;
		
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) { // 사각형 쪼개기
				int x1 = x+i*nSizeNext;
				int y1 = y+j*nSizeNext;
				
				int x2 = x1+nSizeNext-1;
				int y2 = y1+nSizeNext-1;
				if (r1<=x2 && c1 <= y2  && r2>=x1 && c2>=y1) { //쪼개진 사각형과 (r1,c1) ~ (r2,c2)의 영역이 겹치는지
					if (i >= blackLoc && j >= blackLoc && i <= blackLoc + k-1 && j <= blackLoc + k-1) { //쪼개진 하위 사각형이 상위 사각형의 k*k 영역에 포함되는지
						int sx = max(r1, x1);
						int sy = max(c1, y1);
						int ex = min(r2, x2);
						int ey = min(c2, y2);
						draw(sx, sy, ex, ey, 1);
					}//k*k 영역에 포함되는 경우
					else {
						recur(nSizeNext, x1, y1);
					}//k*k 영역에 포함되지 않는 경우
				}
			}
		}
	}
}

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);

	cin >> s >> n >> k >> r1 >> r2 >> c1 >> c2;
	recur(pow(n, s), 0, 0);

	for (int i = 0; i < r2 - r1 + 1; i++) {
		for (int j = 0; j < c2 - c1 + 1; j++) {
			cout << ansMap[i][j];
		}
		cout << '\n';
	}
}