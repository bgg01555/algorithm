#include <iostream>
#include <queue>
#include <stack>
#include <vector>
#include <algorithm>
#include <bitset>
using namespace std;


int main() {
	
	ios::sync_with_stdio(0);
	cin.tie(0);

	vector<int> crains;
	vector<pair<int,int>> boxes;
	int n;
	cin >> n;

	for (int i = 0; i < n; i++) {
		int temp;
		cin >> temp;
		crains.push_back(temp);
	}

	int m;
	cin >> m;
	for (int i = 0; i < m; i++) {
		int box;
		cin >> box;

		int can = 0;
		for (int j = 0; j < n; j++) {
			if (crains[j] >= box) can++;
		}
		boxes.push_back({ box,can });
	}

	sort(boxes.rbegin(), boxes.rend());
	if (boxes[0].first > *max_element(crains.begin(),crains.end())) {
		cout << -1;
		return 0;
	}
	int carriedBox[51];
	fill(carriedBox, carriedBox + n, 0);

	for (int i = 0; i < boxes.size(); i++) {
		int w = boxes[i].first;
		int canCarryCnt = boxes[i].second;

		bool check = false;
		for (int j = 0; j < canCarryCnt; j++) {
			if (carriedBox[j] != carriedBox[0]) {
				check = true;
				carriedBox[j]++;
				break;
			}
		}

		if (!check) { // 모든 높이가 일치
			carriedBox[0]++;
		}
	}

	cout << carriedBox[0];

}